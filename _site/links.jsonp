callback([

  {
    "text": "Conflicts between viewing site on github and previewing it locally",
    "href": "/jekyll/Conflicts-local-github"
  } ,

  {
    "text": "Bias-Variance",
    "href": "/machine%20learning/bias-var"
  } ,

  {
    "text": "Notes on Chapter 2 of ESL",
    "href": "/notes-esl-ch2"
  } ,

  {
    "text": "Longest Valid Parentheses",
    "href": "/algorithms/Longest-Valid-Parentheses"
  } ,

  {
    "text": "Conjoint Analysis",
    "href": "/economics/conjoint-analysis"
  } ,

  {
    "text": "First Missing Positive",
    "href": "/algorithms/First-Missing-Positive"
  } ,

  {
    "text": "Scramble String",
    "href": "/algorithms/Scramble-String"
  } ,

  {
    "text": "Best Time to Buy and Sell Stock I, II and III",
    "href": "/algorithms/Best-Time-to-Buy-and-Sell-Stock"
  } ,

  {
    "text": "Notes on Reservation Price as a Range An Incentive Compatible Measurement Approach",
    "href": "/economics/Reservation-Price-as-a-Range-An-Incentive-Compatible-Measurement-Approach"
  } ,

  {
    "text": "Implement strStr()",
    "href": "/algorithms/Implement-strStr"
  } ,

  {
    "text": "Insert Interval",
    "href": "/algorithms/Insert-Interval"
  } ,

  {
    "text": "Merge Interval",
    "href": "/algorithms/Merge-Interval"
  } ,

  {
    "text": "Sort List",
    "href": "/algorithms/Sort-List"
  } ,

  {
    "text": "Survey Desigin Tips",
    "href": "/economics/Survey-Design-Tips"
  } ,

  {
    "text": "Distinct Subsequences",
    "href": "/algorithms/Distinct-Subsequences"
  } ,

  {
    "text": "Interleaving String",
    "href": "/algorithms/Interleaving-String"
  } ,

  {
    "text": "Largest Rectangle in Histogram",
    "href": "/algorithms/Largest-Rectangle-in-Histogram"
  } ,

  {
    "text": "Maximal Rectangle",
    "href": "/algorithms/Maximum-Rectangle"
  } ,

  {
    "text": "Palindrome Partitioning II",
    "href": "/algorithms/Palindrome-Partitioning-II"
  } ,

  {
    "text": "Survival Analysis Material",
    "href": "/survival%20analysis/Survival-Analysis-Material"
  } ,

  {
    "text": "Wildcard Matching",
    "href": "/algorithms/Wildcard-Matching"
  } ,

  {
    "text": "Minimum Window Substring",
    "href": "/algorithms/Minimum-Window-Substring"
  } ,

  {
    "text": "Simplify Path",
    "href": "/algorithms/Simplify-Path"
  } ,

  {
    "text": "Substring with Concatenation of All Words",
    "href": "/algorithms/Substring-with-Concatenation-of-All-Words"
  } ,

  {
    "text": "Introduction to Survival Analysis (Ch1 & Ch2)",
    "href": "/survival%20analysis/Introduction-to-Survival-Analysis_p1"
  } ,

  {
    "text": "Introduction to Survival Analysis (Ch3)",
    "href": "/survival%20analysis/Introduction-to-Survival-Analysis_p2"
  } ,

  {
    "text": "Introduction to Survival Analysis (Ch4)",
    "href": "/survival%20analysis/Introduction-to-Survival-Analysis_p3"
  } ,

  {
    "text": "Tobit Regression",
    "href": "/economics/Tobit-Regression"
  } ,

  {
    "text": "Numpy Basics",
    "href": "/programming/Numpy-Basics"
  } ,

  {
    "text": "Binary Tree Traversal",
    "href": "/algorithms/Binary-Tree-Traversal"
  } ,

  {
    "text": "Search Insert Position",
    "href": "/algorithms/Climbing-Stairs"
  } ,

  {
    "text": "Maximum Product Subarray",
    "href": "/algorithms/Maximum-Product-Subarray"
  } ,

  {
    "text": "Populating Next Right Pointers in Each Node i and ii",
    "href": "/algorithms/Populating-Next-Right-Pointers-in-Each-Node"
  } ,

  {
    "text": "Remove Duplicates from Sorted List",
    "href": "/algorithms/Remove-Duplicates-From-Sorted-List"
  } ,

  {
    "text": "Search Insert Position",
    "href": "/algorithms/Search-Insert-Position"
  } ,

  {
    "text": "Convert Sorted Array to Binary Search Tree",
    "href": "/algorithms/Convert-Sorted-Array-to-Binary-Search-Tree"
  } ,

  {
    "text": "Maximum Subarray",
    "href": "/algorithms/Maximum-Subarray"
  } ,

  {
    "text": "Merge Two Sorted Lists",
    "href": "/algorithms/Merge-Two-Sorted-Lists"
  } ,

  {
    "text": "Remove Element",
    "href": "/algorithms/Remove-Element"
  } ,

  {
    "text": "Balanced Binary Tree",
    "href": "/algorithms/Balanced-Binary-Tree"
  } ,

  {
    "text": "Gray Code",
    "href": "/algorithms/Gray-Code"
  } ,

  {
    "text": "Merge Sorted Array",
    "href": "/algorithms/Merge-Sorted-Array"
  } ,

  {
    "text": "Pascal's Triangle",
    "href": "/algorithms/Pascal-Triangle"
  } ,

  {
    "text": "Best Time to Buy and Sell Stock I, II and III",
    "href": "/algorithms/Pascal-Triangle-ii"
  } ,

  {
    "text": "Plus One",
    "href": "/algorithms/Plus-One"
  } ,

  {
    "text": "Remove Duplicates from Sorted Array",
    "href": "/algorithms/Remove-Duplicates-from-Sorted-Array"
  } ,

  {
    "text": "Sort Colors",
    "href": "/algorithms/Sort-Colors"
  } ,

  {
    "text": "Balanced Binary Tree",
    "href": "/algorithms/Swap-Nodes-in-Pairs"
  } ,

  {
    "text": "Symmetric Tree",
    "href": "/algorithms/Symmetric-Tree"
  } ,

  {
    "text": "Unique Paths i and ii",
    "href": "/algorithms/Unique-Paths-i-and-ii"
  } ,

  {
    "text": "Binary Tree Level Order Traversal",
    "href": "/algorithms/Binary-Tree-Level-Order+-Traversal"
  } ,

  {
    "text": "Permutations",
    "href": "/algorithms/Permutations"
  } ,

  {
    "text": "Permutations II",
    "href": "/algorithms/PermutationsII"
  } ,

  {
    "text": "Rotate Image",
    "href": "/algorithms/Rotate-Image"
  } ,

  {
    "text": "Binary Tree Level Order Traversal II",
    "href": "/algorithms/Binary-Tree-Level-Order+-Traversal-ii"
  } ,

  {
    "text": "Minimum Path Sum",
    "href": "/algorithms/Minimum-Path-Sum"
  } ,

  {
    "text": "Search a 2D Matrix",
    "href": "/algorithms/Search-a-2D-Matrix"
  } ,

  {
    "text": "Search in Rotated Sorted Array",
    "href": "/algorithms/Search-in-Rotated-Sorted-Array"
  } ,

  {
    "text": "Search in Rotated Sorted Array ii",
    "href": "/algorithms/Search-in-Rotated-Sorted-Array-ii"
  } ,

  {
    "text": "Set Matrix Zeros",
    "href": "/algorithms/Set-Matrix-Zeros"
  } ,

  {
    "text": "Best Time to Buy and Sell Stock I, II and III",
    "href": "/algorithms/Combinations"
  } ,

  {
    "text": "Generate Parentheses",
    "href": "/algorithms/Generate-Parentheses"
  } ,

  {
    "text": "Path Sum",
    "href": "/algorithms/Path-Sum"
  } ,

  {
    "text": "Remove Duplicates from Sorted Array ii",
    "href": "/algorithms/Remove-Duplicates-from-Sorted-Array-ii"
  } ,

  {
    "text": "Single Number ii",
    "href": "/algorithms/Single-Number-ii"
  } ,

  {
    "text": "Spiral Matrix I and II",
    "href": "/algorithms/Spiral-Matrix-i-ii"
  } ,

  {
    "text": "N Queens I And Ii",
    "href": "/N-Queens-i-and-ii"
  } ,

  {
    "text": "N-Queens i and ii",
    "href": "/algorithms/N-Queens-ii"
  } ,

  {
    "text": "Flatten Binary Tree to Linked List",
    "href": "/algorithms/Flatten-Binary-Tree-to-Linked-List"
  } ,

  {
    "text": "Length of Last Word",
    "href": "/algorithms/Length-of-Last-Word"
  } ,

  {
    "text": "Minimum Depth of Binary Tree",
    "href": "/algorithms/Minimum-Depth-of-Binary-Tree"
  } ,

  {
    "text": "Palindrome Number",
    "href": "/algorithms/Palindrome-Number"
  } ,

  {
    "text": "Remove Nth Node From End of List",
    "href": "/algorithms/Remove-Nth-Node-From-End-of-List"
  } ,

  {
    "text": "Sum Root to Leaf Numbers",
    "href": "/algorithms/Sum-Root-to-Leaf-Numbers"
  } ,

  {
    "text": "Valid Parentheses",
    "href": "/algorithms/Valid-Parentheses"
  } ,

  {
    "text": "Valid Sudoku",
    "href": "/Valid-Sudoku"
  } ,

  {
    "text": "Subsets i and ii",
    "href": "/algorithms/Subsets"
  } ,

  {
    "text": "Add Binary",
    "href": "/algorithms/Add-Binary"
  } ,

  {
    "text": "Count and Say",
    "href": "/algorithms/Count-and-Say"
  } ,

  {
    "text": "Longest Common Prefix",
    "href": "/algorithms/Longest-Common-Prefix"
  } ,

  {
    "text": "Longest Palindromic Substring",
    "href": "/algorithms/Longest-Palindromic-Substring"
  } ,

  {
    "text": "Triangle",
    "href": "/algorithms/Triangle"
  } ,

  {
    "text": "ZigZag Conversion",
    "href": "/algorithms/ZigZag-Conversion"
  } ,

  {
    "text": "3Sum Closest",
    "href": "/algorithms/3Sum-Closest"
  } ,

  {
    "text": "3Sum and 4Sum",
    "href": "/algorithms/3Sum-and-4Sum"
  } ,

  {
    "text": "Code Force 273 (Div2)",
    "href": "/codeforce/Code-Force-273"
  } ,

  {
    "text": "Convert Sorted List to Binary Search Tree",
    "href": "/algorithms/Convert-Sorted-List-to-Binary-Search-Tree"
  } ,

  {
    "text": "Linked List Cycle i and ii",
    "href": "/algorithms/Linked-List-Cycle-i-and-ii"
  } ,

  {
    "text": "Path Sum II",
    "href": "/algorithms/Path-Sum-II"
  } ,

  {
    "text": "Binary Tree Zigzag Level Order Traversal",
    "href": "/algorithms/Binary-Tree-Zigzag-Level-Order-Traversal"
  } ,

  {
    "text": "Construct Binary Tree from Inorder and Postorder/Preorder Traversal",
    "href": "/algorithms/Construct-Binary-Tree-from-Inorder-and-Postorder%3APreorder-Traversal"
  } ,

  {
    "text": "Find Minimum in Rotated Sorted Array",
    "href": "/algorithms/Find-Minimum-in-Rotated-Sorted-Array"
  } ,

  {
    "text": "Reorder List",
    "href": "/algorithms/Reorder-List"
  } ,

  {
    "text": "Validate Binary Search Tree",
    "href": "/algorithms/Validate-Binary-Search-Tree"
  } 

])